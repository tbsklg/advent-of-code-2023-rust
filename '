#[test]
fn should_find_empty_rows() {
    let input = vec![
        "...#......",
        ".......#..",
        "#.........",
        "..........",
        "......#...",
        ".#........",
        ".........#",
        "..........",
        ".......#..",
        "#...#.....",
    ];

    let empty_rows = find_empty_rows(input);

    assert_eq!(empty_rows, vec![3, 7]);
}

#[test]
fn should_find_empty_cols() {
    let input = vec![
        "...#......",
        ".......#..",
        "#.........",
        "..........",
        "......#...",
        ".#........",
        ".........#",
        "..........",
        ".......#..",
        "#...#.....",
    ];

    let empty_cols = find_empty_cols(input);

    assert_eq!(empty_cols, vec![2, 5, 8]);
}

#[test]
fn should_expand_universe_by_row() {
    let input = vec![
        "...#......",
        ".......#..",
        "#.........",
        "..........",
        "......#...",
        ".#........",
        ".........#",
        "..........",
        ".......#..",
        "#...#.....",
    ];

    let expanded = expand_by_row(input, 3);

    assert_eq!(
        expanded,
        vec![
            "...#......",
            ".......#..",
            "#.........",
            "..........",
            "..........",
            "......#...",
            ".#........",
            ".........#",
            "..........",
            ".......#..",
            "#...#.....",
        ]
    );
}

#[test]
fn should_expand_universe_by_col() {
    let input = vec![
        "...#......",
        ".......#..",
        "#.........",
        "..........",
        "......#...",
        ".#........",
        ".........#",
        "..........",
        ".......#..",
        "#...#.....",
    ];

    let expanded = expand_by_col(input, 2);

    assert_eq!(
        expanded,
        vec![
            "....#......",
            "........#..",
            "#..........",
            "...........",
            ".......#...",
            ".#.........",
            "..........#",
            "...........",
            "........#..",
            "#....#.....",
        ]
    );
}

#[test]
fn should_expand_univers() {
    let input = vec![
        "....#........",
        ".........#...",
        "#............",
        ".............",
        ".............",
        "........#....",
        ".#...........",
        "............#",
        ".............",
        ".............",
        ".........#...",
        "#....#.......",
    ];

    let expanded = expand_universe(input);

    assert_eq!(expanded, vec![]);
}

fn expand_universe(input: Vec<&str>) -> Vec<String> {
    let cols = find_empty_cols(input);
    let rows = find_empty_rows(input);


    let expanded_col = cols.iter().fold(input, |acc, c| {
        expand_by_col(acc, col)
    })

    vec![]
}

fn expand_by_cols(input: Vec<&str>, cols: Vec<usize>) -> Vec<String> {
    cols.iter().fold(input, |acc, c| {
        expand_by_col(acc, col)
    })
}

fn expand_by_col(input: Vec<&str>, col_index: usize) -> Vec<String> {
    input
        .iter()
        .map(|r| {
            let mut row = r.to_string();
            row.insert(col_index, '.');
            row
        })
        .collect()
}

fn expand_by_row(input: Vec<&str>, row_index: usize) -> Vec<&str> {
    let row = input.get(row_index).unwrap();

    let mut expanded = input.clone();
    expanded.insert(row_index, row.clone());
    expanded
}

fn find_empty_cols(input: Vec<&str>) -> Vec<usize> {
    input[0]
        .chars()
        .enumerate()
        .filter(|(i, _)| input.iter().all(|r| r.chars().nth(*i).unwrap() == '.'))
        .map(|(i, _)| i)
        .collect()
}

fn find_empty_rows(input: Vec<&str>) -> Vec<usize> {
    input
        .iter()
        .enumerate()
        .filter(|(_, r)| r.chars().all(|c| c == '.'))
        .map(|(i, _)| i)
        .collect()
}
